package org.firstinspires.ftc.teamcode;
import java.lang.Math;
import com.qualcomm.robotcore.hardware.DcMotorController;
import com.qualcomm.robotcore.hardware.Servo;
import static org.firstinspires.ftc.teamcode.Encoders_SS.robotMotion.armDown;
import static org.firstinspires.ftc.teamcode.Encoders_SS.robotMotion.armUp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;


@Autonomous
public class Encoders_SS extends LinearOpMode
{
    public DcMotor BR, BL, FR, FL;


    // NOTE TO HOP: verify values
    //CPI is calculated by ((Clicks of Encoders per revolution)/(diameter*pi)
    //Clicks of Encoders per revolution may change based off of different model types
    double cpi = 4; // cycles per inch
    double cpd = 4; // clicks per degree

    // double lcpi = 68; // lines per inch


    public enum robotMotion
    {
        right, left, armUp, armDown;


    }


    @Override
    public void runOpMode() throws InterruptedException
    {


        // hardware map
        BR = hardwareMap.get(DcMotor.class, "BR");
        BL = hardwareMap.get(DcMotor.class, "BL");
        FR = hardwareMap.get(DcMotor.class, "FR");
        FL = hardwareMap.get(DcMotor.class, "FL");
        //Arm = hardwareMap.get(DcMotor.class, "Arm");


        // set direction
        BR.setDirection(DcMotorSimple.Direction.FORWARD);
        BL.setDirection(DcMotorSimple.Direction.REVERSE);
        FR.setDirection(DcMotorSimple.Direction.FORWARD);
        FL.setDirection(DcMotorSimple.Direction.REVERSE);
        // Arm.setDirection() (tbd)


        // set mode
        BR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        BR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        BL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        BL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        FR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        FR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        FL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        FL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);




       // Arm.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
       // Arm.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);




        // set initial power/position
        FR.setPower(0);
        FL.setPower(0);
        BR.setPower(0);
        BL.setPower(0);
       // Arm.setPower(0);


        /* AUTON */
//        waitForStart();
//        forward(36, 0.4);
//        backward(18, 0.4);
//        movementRL(robotMotion.left, 20, 0.3); // must be slower than forward/backward
//        backward(36, 0.4);
//        //armMovement(robotMotion.armUp, 0.3, 0.2);
//        //clawMovement(true);
//        wait((long) 0.5); // some sort of delay function??
//        //clawMovement(false);

        waitForStart();
        sleep(200, 0.0);
        forward(2, 0.01);
        sleep(200, 0.0);


    }


    private void forward(double inch,  double power)
    {
        // calculate new position for (wheel) motors
        // make sure you cast to int!
        int a = (int)(FL.getCurrentPosition() + (inch * cpi));
        int b = (int)(FR.getCurrentPosition() + (inch * cpi));
        int c = (int)(BL.getCurrentPosition() + (inch * cpi));
        int d = (int)(BR.getCurrentPosition() + (inch * cpi));




        // sets new position for motors
        FL.setTargetPosition(a);
        FR.setTargetPosition(b);
        BL.setTargetPosition(c);
        BR.setTargetPosition(d);




        // sets desired power for motors
        // TODO: Do for each wheel motor
        FL.setPower(power);
        FR.setPower(power);
        BL.setPower(power);
        BR.setPower(power);




        // sets motors to RUN_TO_POSITION
        // TODO: Do for each wheel motor
        FL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        FR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        BL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        BR.setMode(DcMotor.RunMode.RUN_TO_POSITION);




        //loop to run encoders method
        while (FL.isBusy() && FR.isBusy() && BL.isBusy() && BR.isBusy())
        {
            // TODO: Add telemetry data here
            telemetry.addData("FL Target", a);
            telemetry.addData("FL Actual", FL.getCurrentPosition());

            telemetry.addData("FR Target", b);
            telemetry.addData("FR Actual", FR.getCurrentPosition());

            telemetry.addData("BL Target", c);
            telemetry.addData("BL Actual", BL.getCurrentPosition());

            telemetry.addData("BR Target", d);
            telemetry.addData("BR Actual", BR.getCurrentPosition());
        }


        // stop motors
        FL.setPower(0);
        FR.setPower(0);
        BL.setPower(0);
        BR.setPower(0);




    }


    private void backward(double inch,  double power)
    {
        // calculate new position for motors
        int a = (int)(FL.getCurrentPosition() - (inch * cpi));
        int b = (int)(FR.getCurrentPosition() - (inch * cpi));
        int c = (int)(BL.getCurrentPosition() - (inch * cpi));
        int d = (int)(BR.getCurrentPosition() - (inch * cpi));


        // sets new position for motors
        FL.setTargetPosition(-a);
        FR.setTargetPosition(-b);
        BL.setTargetPosition(-c);
        BR.setTargetPosition(-d);


        // sets desired power for motors
        FL.setPower(power);
        FR.setPower(power);
        BL.setPower(power);
        BR.setPower(power);


        // make motors run to position
        FL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        FR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        BL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        BR.setMode(DcMotor.RunMode.RUN_TO_POSITION);


        // loop to run encoders method
        while (FL.isBusy() && FR.isBusy() && BL.isBusy() && BR.isBusy())
        {
            telemetry.addData("FL Target", a);
            telemetry.addData("FL Actual", FL.getCurrentPosition());

            telemetry.addData("FR Target", b);
            telemetry.addData("FR Actual", FR.getCurrentPosition());

            telemetry.addData("BL Target", c);
            telemetry.addData("BL Actual", BL.getCurrentPosition());

            telemetry.addData("BR Target", d);
            telemetry.addData("BR Actual", BR.getCurrentPosition());
        }


        // stop motors
        FL.setPower(0);
        FR.setPower(0);
        BL.setPower(0);
        BR.setPower(0);


    }


    private void movementRL(robotMotion action, double inch,  double power)
    {


        if(action == robotMotion.left)
        {
            // left is moving backwards, right is moving forwards
            int a = (int)(FL.getCurrentPosition() - (inch * cpi));
            int b = (int)(FR.getCurrentPosition() + (inch * cpi));
            int c = (int)(BL.getCurrentPosition() - (inch * cpi));
            int d = (int)(BR.getCurrentPosition() + (inch * cpi));


            // sets new position for motors
            FL.setTargetPosition(a);
            FR.setTargetPosition(b);
            BL.setTargetPosition(c);
            BR.setTargetPosition(d);




            // sets desired power for motors
            FL.setPower(-power);
            FR.setPower(power);
            BL.setPower(-power);
            BR.setPower(power);




            // make motors run to position
            FL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            FR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            BL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            BR.setMode(DcMotor.RunMode.RUN_TO_POSITION);




            // loop to run encoders method
            while (FL.isBusy() && FR.isBusy() && BL.isBusy() && BR.isBusy())
            {
                telemetry.addData("FL Target", a);
                telemetry.addData("FL Actual", FL.getCurrentPosition());

                telemetry.addData("FR Target", b);
                telemetry.addData("FR Actual", FR.getCurrentPosition());

                telemetry.addData("BL Target", c);
                telemetry.addData("BL Actual", BL.getCurrentPosition());

                telemetry.addData("BR Target", d);
                telemetry.addData("BR Actual", BR.getCurrentPosition());
            }


            // stop motors
            FL.setPower(0);
            FR.setPower(0);
            BL.setPower(0);
            BR.setPower(0);
        }


        if(action == robotMotion.right)
        {
            // calculates new position for motors
            int a = (int)(FL.getCurrentPosition() + (inch * cpi));
            int b = (int)(FR.getCurrentPosition() - (inch * cpi));
            int c = (int)(BL.getCurrentPosition() + (inch * cpi));
            int d = (int)(BR.getCurrentPosition() - (inch * cpi));




            // sets new position for motors
            FL.setTargetPosition(a);
            FR.setTargetPosition(b);
            BL.setTargetPosition(c);
            BR.setTargetPosition(d);




            // sets desired power for motors
            FL.setPower(power);
            FR.setPower(-power);
            BL.setPower(power);
            BR.setPower(-power);


            // make motors run to position
            FL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            FR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            BL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            BR.setMode(DcMotor.RunMode.RUN_TO_POSITION);


            // loop to run encoders method
            while (FL.isBusy() && FR.isBusy() && BL.isBusy() && BR.isBusy())
            {
                telemetry.addData("FL Target", a);
                telemetry.addData("FL Actual", FL.getCurrentPosition());

                telemetry.addData("FR Target", b);
                telemetry.addData("FR Actual", FR.getCurrentPosition());

                telemetry.addData("BL Target", c);
                telemetry.addData("BL Actual", BL.getCurrentPosition());

                telemetry.addData("BR Target", d);
                telemetry.addData("BR Actual", BR.getCurrentPosition());
            }


            // stop motors
            FL.setPower(0);
            FR.setPower(0);
            BL.setPower(0);
            BR.setPower(0);
        }


    }


    // TODO: function for arm attachment
//    private void armMovement (robotMotion action, double degree, double power)
//    {
//        if (action == armUp){
//            // code
//        }
//        else if (action == armDown){
//            // code
//        }
//    }


    // TODO: function for claw movement
//    private void clawMovement (boolean state)
//    {
//        if (state == true)
//        {
//            // open claw
//        }
//        else
//        {
//            // close claw
//        }
//    }

    private void sleep(int sleep, double power)
    {
        BR.setPower(0);
        FR.setPower(0);
        BL.setPower(0);
        FL.setPower(0);
    }


}
